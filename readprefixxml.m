function [at,bg,alat]=readprefixxml(prefix)
% 用于读取 prefix.xml
% 并生成 prefix.vasp

fnposcar=strcat(prefix,'.vasp');
Bohr_radius=5.29177210903e-11; %m
xmlDoc = xmlread(strcat(prefix,'.xml'));

% 创建 XPath 对象
xpath = javax.xml.xpath.XPathFactory.newInstance().newXPath();

expression = '//output/atomic_structure/cell/a1';
npoolNode = xpath.evaluate(expression, xmlDoc, javax.xml.xpath.XPathConstants.NODE);
a1=str2num(npoolNode.getTextContent());
expression = '//output/atomic_structure/cell/a2';
npoolNode = xpath.evaluate(expression, xmlDoc, javax.xml.xpath.XPathConstants.NODE);
a2=str2num(npoolNode.getTextContent());
expression = '//output/atomic_structure/cell/a3';
npoolNode = xpath.evaluate(expression, xmlDoc, javax.xml.xpath.XPathConstants.NODE);
a3=str2num(npoolNode.getTextContent());
at_au=[a1;a2;a3]'; % 原胞基矢每列，原子单位

expression = '//output/atomic_structure';
npoolNode = xpath.evaluate(expression, xmlDoc, javax.xml.xpath.XPathConstants.NODE);
alat=str2num(npoolNode.getAttribute('alat')); % Hartree atomic units
nat=str2num(npoolNode.getAttribute('nat')); % 原子个数
% alat=vecnorm(a1); % Hartree atomic units，但有些时候因为设置了 ibrav 不能直接这么用，

at=at_au/alat; % 原胞基矢每列，alat制
at_si=at_au*Bohr_radius*1e10; % 埃米

expression = '//output/basis_set/reciprocal_lattice/b1';
npoolNode = xpath.evaluate(expression, xmlDoc, javax.xml.xpath.XPathConstants.NODE);
b1=str2num(npoolNode.getTextContent());
expression = '//output/basis_set/reciprocal_lattice/b2';
npoolNode = xpath.evaluate(expression, xmlDoc, javax.xml.xpath.XPathConstants.NODE);
b2=str2num(npoolNode.getTextContent());
expression = '//output/basis_set/reciprocal_lattice/b3';
npoolNode = xpath.evaluate(expression, xmlDoc, javax.xml.xpath.XPathConstants.NODE);
b3=str2num(npoolNode.getTextContent());
bg=[b1;b2;b3]'; % 倒格矢每列，alat 制

atomNodes = xpath.evaluate('//output/atomic_structure/atomic_positions/atom', xmlDoc, javax.xml.xpath.XPathConstants.NODESET);
atomNames = cell(nat, 1);  % 每个原子种类名
tau = zeros(3,nat);   % 每列是原子坐标，原子单位制
for i = 1:nat
    currentNode = atomNodes.item(i-1);   
    atomNames{i} = char(currentNode.getAttribute('name'));
    tau(:,i)=str2num(char(currentNode.getTextContent()))'; % 原子单位制
end

tau_si=tau*Bohr_radius*1e10; % 埃米 vasp Cartesian
ntypx = 10;
na=zeros(ntypx,1); % 每种原子的个数
atm=cell(ntypx,1); % 每种原子的名称
ntyp=1;
atm{ntyp}=atomNames{1};
na(ntyp)=1;
for ia=2:nat
    if strcmp(atomNames{ia},atm{ntyp})
        na(ntyp)=na(ntyp)+1;
    else
        ntyp=ntyp+1;
        atm{ntyp}=atomNames{ia};
        na(ntyp)=1;
    end
end
atm=atm(1:ntyp);
na=na(1:ntyp);

fposcar=fopen(fnposcar,'w+');
fprintf(fposcar,'Generated by MATLAB code\n1.00000000000000');
fprintf(fposcar,'\n%.16f %.16f %.16f',at_si);
fprintf(fposcar,'\n%s %s %s',string(atm));
fprintf(fposcar,'\n%d %d %d\nCartesian\n',na);
fprintf(fposcar,'%.16f %.16f %.16f\n',tau_si);
fclose(fposcar);

end
